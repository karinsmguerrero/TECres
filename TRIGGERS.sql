

GO
/*
TRIGGER:
NO PERMITE QUE SE ELIMINEN 
LAS UBICACIONES PREDETERMINADAS
*/
CREATE TRIGGER TRIG_UBICACION ON UBICACION
FOR DELETE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT *
        FROM deleted
        WHERE Id <487
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede eliminar', 1;
    END
END;

GO
/*
TRIGGER:
NO PERMITE QUE SE MODIFIQUEN 
LAS UBICACIONES PREDETERMINADAS
*/
CREATE TRIGGER TRIG_UP_UBICACION ON UBICACION
FOR UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT *
        FROM UBICACION
        WHERE Id <487
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede actualizar', 1;
    END
END;

GO
/*
TRIGGER:
NO PERMITE QUE SE ELIMINEN 
LOS INMUEBLES PREDETERMINADOS
*/
CREATE TRIGGER TRIG_INMUEBLE ON INMUEBLE
FOR DELETE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM deleted
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede eliminar', 1;
    END
END;


GO
/*
TRIGGER:
NO PERMITE QUE SE MODIFIQUEN 
LOS INMUEBLES PREDETERMINADOS
*/
CREATE TRIGGER TRIG_UP_INMUEBLE ON INMUEBLE
FOR DELETE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM INMUEBLE
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede actulizar', 1;
    END
END;

GO

/*
TRIGGER:
NO PERMITE ELMINAR LOS 
TIPO DE PERFIL PREDETERMINADO
*/
CREATE TRIGGER TRIG_PERFILCLIENTE ON PERFIL_CLIENTE
FOR DELETE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM deleted
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede eliminar', 1;
    END
END;

GO

/*
TRIGGER:
NO PERMITE MODIFICAR LOS 
TIPO DE PERFIL PREDETERMINADO
*/
CREATE TRIGGER TRIG_UP_PERFILCLIENTE ON PERFIL_CLIENTE
FOR UPDATE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM PERFIL_CLIENTE
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede actualizar', 1;
    END
END;

GO
/*
TRIGGER:
NO PERMITE ELIMINAR 
LOS TIPO ANUNCIO PREDETERMINADO
*/
CREATE TRIGGER TRIG_TIPOANUN ON TIPO_ANUNCIO
FOR DELETE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM deleted
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede eliminar', 1;
    END
END;


GO

/*
TRIGGER:
NO PERMITE MODIFICAR 
LOS TIPO ANUNCIO PREDETERMINADO
*/
CREATE TRIGGER TRIG_UP_TIPOANUN ON TIPO_ANUNCIO
FOR UPDATE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM TIPO_ANUNCIO
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede actualizar', 1;
    END
END;

GO
/*
TRIGGER:
NO PERMITE ELIMINAR 
LOS TIPO DE PISO PREDETERMINADO
*/
CREATE TRIGGER TRIG_TIPOPISO ON TIPO_PISO
FOR DELETE
AS
BEGIN

    SET NOCOUNT ON;

    IF EXISTS (
        SELECT *
        FROM deleted
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede eliminar', 1;
    END
END;

GO
/*
TRIGGER:
NO PERMITE MODIFICAR 
LOS TIPO DE PISO PREDETERMINADO
*/
CREATE TRIGGER TRIG_UP_TIPOPISO ON TIPO_PISO
FOR UPDATE
AS
BEGIN
    SET NOCOUNT ON;
    IF EXISTS (
        SELECT *
        FROM TIPO_PISO
        WHERE Predeterminado = 1
    )
    BEGIN
        ROLLBACK;
        THROW 50001, 'No se puede actualizar', 1;
    END
END;

GO

/**
ELIMINAR TODOS LOS REGISTROS 
ASOCIADOS A UNA PROPIEDAD
*/
CREATE TRIGGER TRIG_DEL_PROPIEDAD ON PROPIEDAD
FOR DELETE 
AS DECLARE @id INT
	SELECT @id = del.Id FROM DELETED del;
	DELETE FROM FOTOS WHERE IdPropiedad = @Id
	DELETE FROM ANUNCIO WHERE IdPropiedad = @Id
	PRINT 'TRIGGER SE ELIMINARON TODOS LOS REGISTROS DE LA PROPIEDAD'

GO
/**
ELIMINAR TODOS LOS REGISTROS 
ASOCIADOS AL DUENO DE UNA PROPIEDAD
*/
CREATE TRIGGER TRIG_DEL_CLIENTE ON CLIENTE
FOR DELETE 
AS DECLARE @username VARCHAR(50)
	SELECT @username = del.Username FROM DELETED del;
	DELETE FROM PROPIEDAD WHERE Propietario = @username;
	DELETE FROM USUARIO WHERE Username=@username;
	PRINT 'TRIGGER SE ELIMINARON TODOS LOS REGISTROS DEL CLIENTE'


GO
/**
ELIMINAR TODOS LOS REGISTROS 
ASOCIADOS A UN ADMINISTRADOR
*/
CREATE TRIGGER TRIG_DEL_ADMIN ON ADMINISTRADOR
FOR DELETE 
AS DECLARE @username VARCHAR(50)
	SELECT @username = del.Username FROM DELETED del;
	DELETE FROM USUARIO WHERE Username=@username;
	PRINT 'TRIGGER SE ELIMINARON TODOS LOS REGISTROS DEL ADMINISTRADOR'

GO
/**
ELIMINAR TODOS LOS REGISTROS 
ASOCIADOS A UN COMPRADOR
*/
CREATE TRIGGER TRIG_DEL_COMPRADOR ON COMPRADOR
FOR DELETE 
AS DECLARE @username VARCHAR(50)
	SELECT @username = del.Username FROM DELETED del;
	DELETE FROM USUARIO WHERE Username=@username;
	PRINT 'TRIGGER SE ELIMINARON TODOS LOS REGISTROS DEL COMPRADOR'

