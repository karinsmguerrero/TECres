//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace tec_api.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TecEntities : DbContext
    {
        public TecEntities()
            : base("name=TecEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ADMINISTRADOR> ADMINISTRADOR { get; set; }
        public virtual DbSet<ANUNCIO> ANUNCIO { get; set; }
        public virtual DbSet<CLIENTE> CLIENTE { get; set; }
        public virtual DbSet<COMPRADOR> COMPRADOR { get; set; }
        public virtual DbSet<FOTOS> FOTOS { get; set; }
        public virtual DbSet<INMUEBLE> INMUEBLE { get; set; }
        public virtual DbSet<MENSAJE> MENSAJE { get; set; }
        public virtual DbSet<NACIONALIDAD> NACIONALIDAD { get; set; }
        public virtual DbSet<OCUPACION> OCUPACION { get; set; }
        public virtual DbSet<PERFIL_CLIENTE> PERFIL_CLIENTE { get; set; }
        public virtual DbSet<PROPIEDAD> PROPIEDAD { get; set; }
        public virtual DbSet<PUBLICO> PUBLICO { get; set; }
        public virtual DbSet<TIPO_ANUNCIO> TIPO_ANUNCIO { get; set; }
        public virtual DbSet<TIPO_PISO> TIPO_PISO { get; set; }
        public virtual DbSet<UBICACION> UBICACION { get; set; }
        public virtual DbSet<USUARIO> USUARIO { get; set; }
    
        public virtual ObjectResult<string> AddCliente(string username, string nombre, string pApellido, string sApellido, Nullable<System.DateTime> fecha, Nullable<int> nacionalidad, Nullable<int> cedula, string perfil)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var pApellidoParameter = pApellido != null ?
                new ObjectParameter("pApellido", pApellido) :
                new ObjectParameter("pApellido", typeof(string));
    
            var sApellidoParameter = sApellido != null ?
                new ObjectParameter("sApellido", sApellido) :
                new ObjectParameter("sApellido", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nacionalidadParameter = nacionalidad.HasValue ?
                new ObjectParameter("nacionalidad", nacionalidad) :
                new ObjectParameter("nacionalidad", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("perfil", perfil) :
                new ObjectParameter("perfil", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("AddCliente", usernameParameter, nombreParameter, pApellidoParameter, sApellidoParameter, fechaParameter, nacionalidadParameter, cedulaParameter, perfilParameter);
        }
    
        public virtual ObjectResult<string> NuevoCliente(string username, string nombre, string pApellido, string sApellido, Nullable<System.DateTime> fecha, string nacionalidad, Nullable<int> cedula, string perfil)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var pApellidoParameter = pApellido != null ?
                new ObjectParameter("pApellido", pApellido) :
                new ObjectParameter("pApellido", typeof(string));
    
            var sApellidoParameter = sApellido != null ?
                new ObjectParameter("sApellido", sApellido) :
                new ObjectParameter("sApellido", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nacionalidadParameter = nacionalidad != null ?
                new ObjectParameter("nacionalidad", nacionalidad) :
                new ObjectParameter("nacionalidad", typeof(string));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("perfil", perfil) :
                new ObjectParameter("perfil", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("NuevoCliente", usernameParameter, nombreParameter, pApellidoParameter, sApellidoParameter, fechaParameter, nacionalidadParameter, cedulaParameter, perfilParameter);
        }
    
        public virtual ObjectResult<string> RegistrarCliente(string username, string nombre, string pApellido, string sApellido, Nullable<System.DateTime> fecha, Nullable<int> nacionalidad, Nullable<int> cedula, string perfil)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var pApellidoParameter = pApellido != null ?
                new ObjectParameter("pApellido", pApellido) :
                new ObjectParameter("pApellido", typeof(string));
    
            var sApellidoParameter = sApellido != null ?
                new ObjectParameter("sApellido", sApellido) :
                new ObjectParameter("sApellido", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var nacionalidadParameter = nacionalidad.HasValue ?
                new ObjectParameter("nacionalidad", nacionalidad) :
                new ObjectParameter("nacionalidad", typeof(int));
    
            var cedulaParameter = cedula.HasValue ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(int));
    
            var perfilParameter = perfil != null ?
                new ObjectParameter("perfil", perfil) :
                new ObjectParameter("perfil", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RegistrarCliente", usernameParameter, nombreParameter, pApellidoParameter, sApellidoParameter, fechaParameter, nacionalidadParameter, cedulaParameter, perfilParameter);
        }
    }
}
